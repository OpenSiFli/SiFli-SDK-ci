name: 'Get GitLab Project Info'
description: 'Retrieve GitLab project information including API URL, repository URL, and project ID'
inputs:
  gitlab_url:
    description: 'GitLab instance URL'
    required: true
  gitlab_repo_path:
    description: 'GitLab repository path (e.g., group/project)'
    required: true
  gitlab_token:
    description: 'GitLab API access token'
    required: true
outputs:
  project_id:
    description: 'GitLab Project ID'
    value: ${{ steps.get-info.outputs.project_id }}

runs:
  using: "composite"
  steps:
    - id: get-info
      shell: bash
      env:
        GITLAB_URL: ${{ inputs.gitlab_url }}
        GITLAB_REPO_PATH: ${{ inputs.gitlab_repo_path }}
        GITLAB_TOKEN: ${{ inputs.gitlab_token }}
      run: |
        # Construct GitLab API URL and repository URL
        GITLAB_API_URL="https://${GITLAB_URL}/api/v4"
        
        # Try to get project ID directly using the provided path
        # Assuming GITLAB_REPO_PATH is already in the correct format for the API
        RESPONSE=$(curl -s -H "PRIVATE-TOKEN: ${GITLAB_TOKEN}" "${GITLAB_API_URL}/projects/${GITLAB_REPO_PATH}")
        
        # Check if response is valid JSON and has an id field
        if echo "$RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
          PROJECT_ID=$(echo "$RESPONSE" | jq -r '.id')
        else
          PROJECT_ID=""
        fi
        
        # If the first approach fails, try using the search API
        if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
          echo "First method failed, trying alternative approach with search API..."
          
          # Search for the project by name with exact path
          SEARCH_RESPONSE=$(curl -s -H "PRIVATE-TOKEN: ${GITLAB_TOKEN}" "${GITLAB_API_URL}/projects?search=${GITLAB_REPO_PATH}&simple=true")
          
          # Check if response is valid JSON before processing
          if echo "$SEARCH_RESPONSE" | jq -e 'length > 0' > /dev/null 2>&1; then
            PROJECT_ID=$(echo "$SEARCH_RESPONSE" | jq -r '[.[] | select(.path_with_namespace == "'${GITLAB_REPO_PATH}'")] | .[0].id // ""')
          else
            PROJECT_ID=""
          fi
        fi
        
        # If both approaches fail, exit with an error
        if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
          echo "Error: Unable to retrieve GitLab Project ID. Please check GITLAB_REPO_PATH and GITLAB_TOKEN."
          exit 1
        else
          echo "Successfully retrieved GitLab Project ID: ${PROJECT_ID}"
          echo "project_id=${PROJECT_ID}" >> $GITHUB_OUTPUT
        fi